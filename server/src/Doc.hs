{-# LANGUAGE DataKinds #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE TypeSynonymInstances #-}

module Doc where

import Data.Time
import Database.Esqueleto.Experimental (Entity (..), Key, toSqlKey)
import RIO
import RIO.ByteString (writeFile)
import RIO.Text
import Servant (Capture)
import Servant.Auth.Server (Cookie, JWT, SetCookie)
import Servant.Docs
import Server (api)
import Server.API.AuthAPI (AuthenticatedUser (AuthenticatedUser))
import Server.API.Requests
import Server.Database.Model
import System.IO (openFile)

-- apiDocs :: API
-- apiDocs = docs api

-- docsBS :: ByteString
-- docsBS = encodeUtf8 . pack . markdown $ docsWithIntros [intro] api
--   where
--     intro = DocIntro "Rest API Documentation" ["Autogenerated using Servant Docs"]

-- generateMarkdownDocs :: IO ()
-- generateMarkdownDocs = do
--   writeFile "../README.md" docsBS

-- Docs --

questionId :: Key Question
questionId = toSqlKey 1

sampleUserId :: Key User
sampleUserId = toSqlKey 2

sampleAnswerId :: Key Answer
sampleAnswerId = toSqlKey 3

qTitle = "Question Title"

qContent = "Question Content"

sampleAnswerContent = "Answer Content"

sampleUpdatedContent = "Updated Content"

sampleUsername = "superCoolUsername"

sampleEmail = "email@sample.com"

sampleFirstname = "FirstName"

sampleSurname = "Surname"

samplePassword = "abc123"

createdAt = UTCTime (fromGregorian 2021 08 19) (secondsToDiffTime 0)

updatedAt = UTCTime (fromGregorian 2021 08 21) (secondsToDiffTime 0)

sampleQuestion :: Question
sampleQuestion = Question qTitle qContent sampleUserId createdAt updatedAt

sampleAnswer :: Answer
sampleAnswer = Answer questionId sampleAnswerContent sampleUserId createdAt updatedAt

createQuestionRequest :: CreateQuestionRequest
createQuestionRequest = CreateQuestionRequest qTitle qContent []

updateQuestionRequest :: UpdateQuestionRequest
updateQuestionRequest = UpdateQuestionRequest sampleUpdatedContent

createAnswerRequest :: CreateAnswerRequest
createAnswerRequest = CreateAnswerRequest sampleAnswerContent

updateAnswerRequest :: UpdateAnswerRequest
updateAnswerRequest = UpdateAnswerRequest sampleUpdatedContent

sampleSignupForm :: SignupForm
sampleSignupForm =
  SignupForm sampleUsername sampleFirstname sampleSurname sampleEmail samplePassword samplePassword

sampleLoginForm :: LoginForm
sampleLoginForm = LoginForm sampleUsername samplePassword

sampleAuthenticatedUser :: AuthenticatedUser
sampleAuthenticatedUser = AuthenticatedUser sampleUserId sampleFirstname sampleSurname

instance ToCapture (Capture "questionId" (Key Question)) where
  toCapture _ =
    DocCapture "questionId" "Question Id"

instance ToCapture (Capture "answerId" (Key Answer)) where
  toCapture _ =
    DocCapture "answerId" "Answer Id"

instance ToSample CreateQuestionRequest where
  toSamples _ = singleSample createQuestionRequest

instance ToSample (Entity Question) where
  toSamples _ = singleSample (Entity questionId sampleQuestion)

instance ToSample UpdateQuestionRequest where
  toSamples _ = singleSample updateQuestionRequest

instance ToSample (Entity Answer) where
  toSamples _ = singleSample (Entity sampleAnswerId sampleAnswer)

instance ToSample CreateAnswerRequest where
  toSamples _ = singleSample createAnswerRequest

instance ToSample UpdateAnswerRequest where
  toSamples _ = singleSample updateAnswerRequest

instance ToSample SignupForm where
  toSamples _ = singleSample sampleSignupForm

instance ToSample LoginForm where
  toSamples _ = singleSample sampleLoginForm

instance ToSample AuthenticatedUser where
  toSamples _ = singleSample sampleAuthenticatedUser

instance ToSample SetCookie where
  toSamples _ = noSamples

instance ToSample Cookie where
  toSamples _ = noSamples

instance ToSample JWT where
  toSamples _ = noSamples
